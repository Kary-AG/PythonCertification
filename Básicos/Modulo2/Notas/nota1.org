* Los tipos de datos y los métodos básicos de formateo, conversión de datos, entrada y salida de datos.

** La función print()
#+BEGIN_SRC python
print("Hola Mundo")
#+END_SRC

```print``` es el **nombre de una función**.
*** Nota:
Una función (en este contexto) es una parte separada del código de computadora el cual es capaz de:
 + Causar algún efecto
   Por ejemplo, enviar texto a la terminal, crear un archivo, dibujar una imagen, reproducir un sonido, etc.
 + Evaluar un valor o algunos valores
   Por ejemplo, la raíz cuadrada de un valor o la longitud de un texto dado.
 + Argumentos

¿De dónde provienen las funciones?
+ Pueden venir de Python mismo(está integrada).
+ Pueden provenir de uno o varios de los módulos de Python llamados complementos.
+ Puedes escribirlas tú mismo.



El único argumento entregado a la función ```print()``` en el ejemplo anterior es una cadena, el nombre de la función (print en este caso) junto con los paréntesis y los argumentos, forman la invocación de la función.

1. ¿Cuál es el efecto que causa la función ```print()```?

   La función toma los argumentos los convierte en un formato legible para el ser humano si es necesario y **envía los datos resultantes al dispositivo de salida**.
2. ¿Qué argumentos espera ```print()```?

   Cualquiera.
3. ¿Qué valor evalúa la función print()?

   Ninguno.
*** Ejercicios

+ [print()]()
+ [Invocación de print() vacía]()
+ [La función print() - los caracteres de escape y nueva línea]()

  1. Si deseas colocar solo una barra invertida dentro de una cadena, no olvides su naturaleza de escape: tienes que duplicarla, por ejemplo, la siguiente invocación causará un error:

     #+BEGIN_SRC python
     print("\")
     #+END_SRC
  Mientras que esta no lo hará:

     #+BEGIN_SRC python
     print("\\")
     #+END_SRC
  2. No todos los pares de escape (la barra invertida junto con otro carácter) significan algo.
+ [La función print() utilizando argumentos múltiples]()
+ [La función print() - los argumentos de palabras clave]()
  Python ofrece otro mecanismo para transmitir o pasar los argumentos.
  La función print() tiene dos argumentos de palabras clave que se pueden utilizar para estos propósitos. El primero de ellos se llama end.

  El argumento de palabra clave que puede hacer esto se denomina sep (como separador).

Un literal se refiere a datos cuyos valores están determinados por el literal mismo.

Se utilizan literales para codificar datos y ponerlos dentro del código. Ahora mostraremos algunas convenciones que se deben seguir al utilizar Python.

+ [Literales - los datos en si mismos](ejer6.py)



** Literales en Python

*** Enteros
 Aquellos que no tienen una parte fraccionaria.
**** Nota:
Python permite el uso de guion bajo en los literales numéricos.
Por lo tanto, el número se puede escribir ya sea así: 11111111, o como sigue: 11_111_111.
Enteros: números octales y hexadecimales
Si un numero entero esta precedido por un código 0O o 0o (cero-o), el numero será tratado como un valor octal.
#+BEGIN_SRC python
print(0o123)
#+END_SRC
La segunda convención nos permite utilizar números en hexadecimal. Dichos números deben ser precedidos por el prefijo 0x o 0X (cero-x).
#+BEGIN_SRC python
print(0x123)
#+END_SRC

*** Flotantes
 Los números que (como lo diría un matemático) tienen una parte decimal no vacía, son números que tienen (o pueden tener) una parte fraccionaria después del punto decimal.
 la computadora considera como números punto-flotante:
#+BEGIN_EXAMPLE
2.5
-0.4
#+END_EXAMPLE

4 es un número entero, mientras que 4.0 es un número punto-flotante.

Cuando se desea utilizar números que son muy pequeños o muy grandes, se puede implementar la notación científica.

#+BEGIN_SRC python
3E8
#+END_SRC
La letra E (también se puede utilizar la letra minúscula e - proviene de la palabra exponente) la cual significa por diez a la n potencia.

***** Nota
+ El exponente (el valor después de la E) debe ser un valor entero.
+ La base (el valor antes de la E) puede o no ser un valor entero.
*** Cadenas
Las cadenas se emplean cuando se requiere procesar texto, no números, las cadenas requieren comillas así como los flotantes necesitan punto decimal.
#+BEGIN_SRC python
print("Me gusta \"Monty Python\"")
#+END_SRC
*** Valores Booleanos
Se emplean para representar un valor muy abstracto - la veracidad.
**** Nota
+ Proviene de George Boole (1815-1864), el autor de Las Leyes del Pensamiento, las cuales definen el Algebra Booleana - una parte del algebra que hace uso de dos valores: Verdadero y Falso, denotados como 1 y 0.


#+BEGIN_SRC python
print(True > False)
print(True < False)
#+END_SRC
** Puntos Clave

1. Literales son notaciones para representar valores fijos en el código. Python tiene varios tipos de literales, es decir, un literal puede ser un número por ejemplo, 123), o una cadena (por ejemplo, "Yo soy un literal.").

2. El Sistema Binario es un sistema numérico que emplea 2 como su base. Por lo tanto, un número binario está compuesto por 0s y 1s únicamente, por ejemplo, 1010 es 10 en decimal.
   Los sistemas de numeración Octales y Hexadecimales son similares pues emplean 8 y 16 como sus bases respectivamente. El sistema hexadecimal utiliza los números decimales más seis letras adicionales.

3. Los Enteros (o simplemente int) son uno de los tipos numéricos que soporta Python. Son números que no tienen una parte fraccionaria, por ejemplo, 256, o -1 (enteros negativos)

4. Los números Punto-Flotante (o simplemente flotantes) son otro tipo numérico que soporta Python. Son números que contienen (o son capaces de contener) una parte fraccionaria, por ejemplo, 1.27.

5. Para codificar un apóstrofe o una comilla dentro de una cadena se puede utilizar el carácter de escape, por ejemplo, 'I\'m happy.', o abrir y cerrar la cadena utilizando un conjunto de símbolos distintos al símbolo que se desea codificar, por ejemplo, "I'm happy." para codificar un apóstrofe, y 'Él dijo "Python", no "typhoon"' para codificar comillas.

6. Los Valores Booleanos son dos objetos constantes Verdadero y Falso empleados para representar valores de verdad (en contextos numéricos 1 es True, mientras que 0 es False).


 * Nota:
   Existe un literal especial más utilizado en Python: el literal None. Este literal es llamado un objeto de NonType (ningún tipo), y puede ser utilizado para representar la ausencia de un valor. Pronto se hablará más acerca de ello.

** Los Operadores Básicos

Un **operador** es un símbolo del lenguaje de programación, el cual es capaz de realizar operaciones con los valores.
Por ejemplo:
#+BEGIN_EXAMPLE
+, -, *, /, //, %, **
#+END_EXAMPLE
*** Nota

Cuando los datos y operadores se unen, forman juntos expresiones. La expresión más sencilla es el literal.

*** Operadores aritméticos

**** Exponenciación
Un signo de ** (doble asterisco) es un operador de exponenciación (potencia). El argumento a la izquierda es la base, el de la derecha, el exponente.
#+BEGIN_SRC python
print(2 ** 3)
print(2 ** 3.)
print(2. ** 3)
print(2. ** 3.)
#+END_SRC
****** Nota
+ Cuando ambos ** argumentos son enteros, el resultado es entero también.
  - Cuando al menos un ** argumento es flotante, el resultado también es flotante.

**** Multiplacación
Un símbolo de * (asterisco) es un operador de multiplicación.
#+BEGIN_SRC python
print(2 * 3)
print(2 * 3.)
print(2. * 3)
print(2. * 3.)
#+END_SRC

**** División
Un símbolo de / (diagonal) es un operador de división.
El valor después de la diagonal es el dividendo, el valor antes de la diagonal es el divisor.
#+BEGIN_SRC python
print(6 / 3)
print(6 / 3.)
print(6. / 3)
print(6. / 3.)
#+END_SRC
El resultado producido por el operador de división siempre es flotante.

**** División entera
Un símbolo de // (doble diagonal) es un operador de división entera. Difiere del operador estándar / en dos detalles:

+ El resultado carece de la parte fraccionaria, está ausente (para los enteros), o siempre es igual a cero (para los flotantes); esto significa que los resultados siempre son redondeados.
+ Se ajusta a la regla entero vs flotante
  #+BEGIN_SRC python
  print(6 // 3)
  print(6 // 3.)
  print(6. // 3)
  print(6. // 3.)
  #+END_SRC

****** Nota

+  una división de entero entre entero da un resultado entero. Todos los demás casos producen flotantes.

+ El redondeo se hace hacia el valor inferior entero.
*** Operadores
**** Residuo(módulo)
Es el valor que sobra después de dividir un valor entre otro para producir un resultado entero.

#+BEGIN_SRC  python
print(14 % 4)
#+END_SRC

 El resultado es dos. Esta es la razón:
+ 14 // 4 da como resultado un 3 $\rightarow$ esta es la parte entera, es decir el cociente.
+ 3 * 4 da como resultado 12 $\rightarrow$ como resultado de la multiplicación entre el cociente y el divisor.
+ 14 - 12 da como resultado 2 $\rightarrow$ este es el residuo.

**** Como no dividir
la división entre cero no funciona.la división entre cero no funciona.

***** No intentes:
+ Dividir entre cero.
+ Realizar una división entera entre cero.
+ Encontrar el residuo de una división entre cero.

**** Suma
El símbolo del operador de suma es el + (signo de más), el cual esta completamente alineado a los estándares matemáticos.
#+BEGIN_SRC python
print(-4 + 4)
print(-4. + 8)
#+END_SRC

**** Resta
El símbolo del operador de resta es obviamente - (el signo de menos), sin embargo debes notar que este operador tiene otra función - puede cambiar el signo de un número.

***** Operadores unarios y binarios.
 + En aplicaciones de resta, el operador de resta espera dos argumentos: el izquierdo (un minuendo en términos aritméticos) y el derecho (un sustraendo).

 + El operador conserva el signo de su único argumento, el de la derecha.





*** Lista de prioridades
| **Prioridades** | **Operador** |         |
|-----------------+--------------+---------|
|               1 | +,-          | unario  |
|               2 | **           |         |
|               3 | *,/,%        |         |
|               4 | +,-          | binario |
**** Nota
+ Se han enumerado los operadores en orden de la mas alta (1) a la mas baja (4) prioridad.
+ Se permite hacer uso de paréntesis, lo cual cambiará el orden natural del cálculo de la operación.
#+BEGIN_SRC python
print(2 * 3 % 5)
#+END_SRC
#+RESULT: 1
** Puntos Clave
1. Una expresión es una combinación de valores (o variables, operadores, llamadas a funciones, aprenderás de ello pronto) las cuales son evaluadas y dan como resultado un valor, por ejemplo, 1+2.

2. Los operadores son símbolos especiales o palabras clave que son capaces de operar en los valores y realizar operaciones matemáticas, por ejemplo, el * multiplica dos valores: x*y.

3. Los operadores aritméticos en Python: + (suma), - (resta), * (multiplicación), / (división clásica: regresan un flotante si uno de los valores es de este tipo), % (módulo: divide el operando izquierdo entre el operando derecho y regresa el residuo de la operación, por ejemplo, 5%2=1), ** (exponenciación: el operando izquierdo se eleva a la potencia del operando derecho, por ejemplo, 2**3=2*2*2=8), // (división entera: retorna el numero resultado de la división, pero redondeado al numero entero inferior más cercano, por ejemplo, 3//2.0=1.0).

 4. Un operador unario es un operador con solo un operando, por ejemplo, -1, o +3.

 5. Un operador binario es un operador con dos operados, por ejemplo, 4+5, o 12%5.

 6. Algunos operadores actúan antes que otros, a esto se le llama - jerarquía de prioridades:

    + Unario + y - tienen la prioridad más alta.
    + Después: **, después: *, /, y %, y después la prioridad más baja: binaria + y -.

 7. Las sub-expresiones dentro de paréntesis siempre se calculan primero, por ejemplo, 15-1*(5*(1+2))=0.

 8. Los operadores de exponenciación utilizan enlazado hacia la derecha, por ejemplo, 2**2**3=256.
** ¿Qué son las Variables?
Es justo que Python nos permita codificar literales, las cuales contengan valores numéricos y cadenas.
**Almacenar los resultados**
Python ofrece "cajas" (contenedores) especiales para este propósito, estas cajas son llamadas variables - el nombre mismo sugiere que el contenido de estos contenedores puede variar en casi cualquier forma.
*** ¿Cuáles son los componentes o elementos de una variable en Python?
+ Un nombre
  * Seguir las siguientes reglas:
     + Estar compuesto por MAYUSCULAS, minúsculas, dígitos, y el carácter _ (guion bajo).
     + El nombre de la variable debe comenzar con una letra.
     + El carácter guion bajo es considerado una letra.
     + Las mayúsculas y minúsculas se tratan de forma distinta.
     + El nombre de las variables no pueden ser igual a alguna de las palabras reservadas de Python.
+ Un valor (el contenido del contenedor).

Una variable se crea cuando se le asigna un valor. A diferencia de otros lenguajes de programación, no es necesario declararla.

Si se le asigna cualquier valor a una variable no existente, la variable será automáticamente creada. No se necesita hacer algo más.

La creación (o su sintaxis) es muy simple: solo utiliza el nombre de la variable deseada, después el signo de igual (=) y el valor que se desea colocar dentro de la variable.

#+BEGIN_SRC python
var = 1
print(var)
#+END_SRCI

*** Ejercicios
+ [Resolviendo problemas matemáticos simples]()
+ [Variables](ejer9.py)
** Operadores Abreviados

Se desea utilizar la misma variable al lado derecho y al lado izquierdo del operador ```=```

Por ejemplo:

#+BEGIN_SRC python
i = i + 2 * j ⇒ i += 2 * j
var = var / 2 ⇒ var /= 2
rem = rem % 10 ⇒ rem %= 10
j = j - (i + var + rem) ⇒ j -= (i + var + rem)
x = x ** 2 ⇒ x **= 2
#+END_SRC
*** Ejercicios
+ [Un sencillo convertidor](ejer10.py)
+ [Operadores y expresiones](ejer11.py)

** Puntos Clave
1. Una variable es una ubicación nombrada reservada para almacenar valores en la memoria. Una variable es creada o inicializada automáticamente cuando se le asigna un valor por primera vez.
2. Cada variable debe de tener un nombre único - un identificador. Un nombre valido debe ser aquel que no contiene espacios, debe comenzar con un guion bajo (_), o una letra, y no puede ser una palabra reservada de Python. El primer carácter puede estar seguido de guiones bajos, letras, y dígitos. Las variables en Python son sensibles a mayúsculas y minúsculas.

3. Python es un lenguaje de tipo dinámico, lo que significa que no se necesita declarar variables en él. Para asignar valores a las variables, se utiliza simplemente el operador de asignación, es decir el signo de igual (=) por ejemplo, var = 1.

4. También es posible utilizar operadores de asignación compuesta (operadores abreviados) para modificar los valores asignados a las variables, por ejemplo, var += 1, or var /= 5 * 2.

5. Se les puede asignar valores nuevos a variables ya existentes utilizando el operador de asignación o un operador abreviado:

   #+BEGIN_SRC python
   var = 2
   print(var)

   var = 3
   print(var)

   var += 1
   print(var)
   #+END_SRC

 6. Se puede combinar texto con variables empleado el operador +, y utilizar la función print() para mostrar o imprimir los resultados, por ejemplo:

    #+BEGIN_SRC python
    var = "007"
    print("Agente " + var)
    #+END_SRC

** La función input()
La función input() es capaz de leer datos que fueron introducidos por el usuario y pasar esos datos al programa en ejecución.
**** Nota:
Todos los programas leen y procesan datos. Un programa que no obtiene datos de entrada del usuario es un programa sordo.
+ La función input() es invocada sin argumentos (es la manera mas sencilla de utilizar la función); la función pondrá la consola en modo de entrada.
+ La función input() al ser invocada con un argumento, contiene una cadena con un mensaje.
** Conversión de datos o casting

+ La función int() toma un argumento (por ejemplo, una cadena: int(string)) e intenta convertirlo a un valor entero; si llegase a fallar, el programa entero fallará también (existe una manera de solucionar esto, se explicará mas adelante).
+ La función float() toma un argumento (por ejemplo, una cadena: float(string)) e intenta convertirlo a flotante (el resto es lo mismo).
#+BEGIN_SRC python
cateto_a = float(input("Inserta la longitud del primer cateto: "))
cateto_b = float(input("Inserta la longitud del segundo cateto "))
hipo = (cateto_a**2 + cateto_b**2) ** .5
print("La longitud de la hipotenusa es: ", hipo)
#+END_SRC

+ La función str() convertir un numero a una cadena.

  [Entradas y salidas simples]()
** Operadores de cadenas
+ y *, ambos tienen una función secundaría.
*** Concatenación
El sigo de + (más), al ser aplicado a dos cadenas, se convierte en un operador de concatenación:
#+BEGIN_SRC python
string + string
#+END_SRC
Simplemente concatena (junta) dos cadenas en una.
*** Replicación
El signo de * (asterisco), cuando es aplicado a una cadena y a un número (o a un número y cadena) se convierte en un operador de replicación.
Replica la cadena el numero de veces indicado por el número.
Un número menor o igual que cero produce una cadena vacía.

** Ejercicios
+ [Operadores y expresiones]()
** Puntos Clave
1. La función print() envía datos a la consola, mientras que la función input() obtiene datos de la consola.
2. La función input() viene con un parámetro inicial: un mensaje de tipo cadena para el usuario. Permite escribir un mensaje antes de la entrada del usuario, por ejemplo:
   #+BEGIN_SRC python
   nombre = input("Ingresa tu nombre: ")
   print("Hola, " + nombre + ". ¡Un gusto conocerte!")
   #+END_SRC

3. Cuando la función input() es llamada o invocada, el flujo del programa se detiene, el símbolo del cursor se mantiene parpadeando (le está indicando al usuario que tome acción ya que la consola está en modo de entrada) hasta que el usuario haya ingresado un dato y/o haya presionado la tecla Enter.
