* Fundamentos de Programación Python4
** ¿Por qué usar funciones?
+ Si un fragmento de código comienza a aparecer en más de una ocasión, considera la posibilidad de aislarlo en la forma de una función
+ Algunos dicen que una función bien escrita debe ser comprensible con tan solo una mirada.
+ Un buen desarrollador divide el código (o mejor dicho: el problema) en piezas aisladas, y codifica cada una de ellas en la forma de una función.
+ : si un fragmento de código se hace tan extenso que leerlo o entenderlo se hace complicado, considera dividirlo pequeños problemas por separado e implementa cada uno de ellos como una función independiente.
+ Se debe descomponer el problema para permitir que el producto sea implementado como un conjunto de funciones escritas por separado empacadas juntas en diferentes módulos.

** ¿De dónde provienen las funciones?
+ De Python mismo: varias funciones (como print()) son una parte integral de Python, se les llama a estas funciones funciones integradas.
+ De los módulos preinstalados de Python:están disponibles en módulos instalados juntamente con Python; para poder utilizar estas funciones el programador debe realizar algunos pasos adicionales.
+ Directamente del código: tu puedes escribir tus propias funciones, colocarlas dentro del código, y usarlas libremente.
** ¿Cómo es que se crea dicha función?
Se necesita definirla.La definición más simple de una función:
#+BEGIN_SRC python
def nombreFuncion():
    cuerpoFuncion
#+END_SRC
+ Siempre comienza con la palabra reservada def (que significa definir)
+ Después de def va el nombre de la función (las reglas para darle nombre a las funciones son las mismas que para las variables).
+ Después del nombre de la función, hay un espacio para un par de paréntesis (ahorita no contienen algo, pero eso cambiará pronto).
+ La línea debe de terminar con dos puntos.
+ La línea inmediatamente después de def marca el comienzo del cuerpo de la función - donde varias o (al menos una). instrucción anidada, será ejecutada cada vez que la función sea invocada; nota: la función termina donde el anidamiento termina, se debe ser cauteloso.
+  Python lee la definición de la función y la recuerda, pero no la ejecuta sin permiso.
** El funcionamiento de las funciones
La imagen intenta mostrar el proceso completo:

+ Cuando se invoca una función, Python recuerda el lugar donde esto ocurre y salta hacia dentro de la función invocada.
+ El cuerpo de la función es entonces ejecutado.
+ Al llegar al final de la función, Python regresa al lugar inmediato después de donde ocurrió la invocación.
+ Existen dos consideraciones muy importantes, la primera de ella es:
   - No se debe invocar una función antes de que se haya definido.
   - Una función y una variable no pueden compartir el mismo nombre.

** Puntos Clave
1. Una función es un bloque de código que realiza una tarea especifica cuando la función es llamada (invocada). Las funciones son útiles para hacer que el código sea reutilizable, que este mejor organizado y más legible. Las funciones contienen parámetros y pueden regresar valores.

2. Existen al menos cuatro tipos de funciones básicas en Python:

Funciones integradas las cuales son partes importantes de Python (como lo es la función print()). Puedes ver una lista completa de las funciones integradas de Python en la siguiente liga: https://docs.python.org/3/library/functions.html.
También están las que se encuentran en módulos pre-instalados (se hablará acerca de ellas en el Módulo 5 de este curso).
Funciones definidas por el usuario las cuales son escritas por los programadores para los programadores, puedes escribir tus propias funciones y utilizarlas libremente en tu código.
Las funciones lambda (aprenderás acerca de ellas en el Módulo 6 del curso).
3. Las funciones propias se pueden definir utilizando la palabra reservada def y con la siguiente sintaxis:
#+BEGIN_SRC python
def tuFuncion (parámetros opcionales):
    # el cuerpo de la función
#+END_SRC python
Se puede definir una función sin que haga uso de argumentos, por ejemplo:
#+BEGIN_SRC python
def mensaje():    # definiendo una función
    print("Hola")    # cuerpo de la función

mensaje()    # invocación de la función
#+END_SRC
También es posible definir funciones con argumentos, como la siguiente que contiene un solo parámetro:
#+BEGIN_SRC python
def hola(nombre):    # definiendo una función
    print("Hola,", nombre)    # cuerpo de la función


nombre = input("Ingresa tu nombre: ")

hola(nombre)    # invocación de la función
#+END_SRC

** Funciones con parámetros
Un parámetro es una variable, pero existen dos factores que hacen a un parámetro diferente:
+ Los parámetros solo existen dentro de las funciones en donde han sido definidos.
+ La asignación de un valor a un parámetro de una función se hace en el momento en que la función se manda llamar o se invoca.
  Los parámetros solo existen dentro de las funciones (este es su entorno natural).
Los argumentos existen fuera de las funciones, y son los que pasan los valores a los parámetros correspondientes.
** Puntos Clave
1. Se puede pasar información a las funciones utilizando parámetros. Las funciones pueden tener tantos parámetros como sean necesarios.
2. Puedes pasar argumentos a una función utilizando las siguientes técnicas:

+ Paso de argumentos posicionales en la cual el orden de los parámetros es relevante.
+ Paso de argumentos con palabras clave en la cual el orden de los argumentos es irrelevante.
+ Una mezcla de argumentos posicionales y con palabras clave.
Es importante recordar que primero se especifican los argumentos posicionales y después los de palabras clave.
3. Se puede utilizar la técnica de argumentos con palabras clave para asignar valores predefinidos a los argumentos
** Regresando el resultado de una función
Para lograr que las funciones devuelvan un valor (pero no solo para ese propósito) se utiliza la instrucción return (regresar o retornar).

La instrucción return tiene dos variantes diferentes: considerémoslas por separado.
+ return sin una expresión
  La primera consiste en la palabra reservada en sí, sin nada que la siga.Terminación inmediata de la ejecución de la función, y un retorno instantáneo (de ahí el nombre) al punto de invocación.
+ return con una expresión
  La segunda variante de return está extendida con una expresión:
    #+BEGIN_SRC python
    funcion():
        return expresión
    #+END_SRC
 Hay dos consecuencias de usarla:

   + Provoca la terminación inmediata de la ejecución de la función (nada nuevo en comparación con la primer variante).
   + Además, la función evaluará el valor de la expresión y lo devolverá (de ahí el nombre una vez mas) como el resultado de la función.

** acerca de None
no debe participar en ninguna expresión.
Solo hay dos tipos de circunstancias en las que None se puede usar de manera segura:

+ Cuando se le asigna a una variable (o se devuelve como el resultado de una función).
+ Cuando se compara con una variable para diagnosticar su estado interno.

** EJERCICIOS
+ [Un año bisiesto: escribiendo tus propias funciones]()
+ [¿Cuántos días?]()
+ [Días del Año]()
+ [¿Cómo encontrarlos?]()
+ [Convirtiendo el consumo de combustible](NO-TA)

** Puntos Clave
1. Puedes emplear la palabra clave return para decirle a una función que devuelva algún valor. La instrucción return termina la función.
2. El resultado de una función se puede asignar fácilmente a una variable.
3. Puedes usar una lista como argumento de una función
4. Una lista también puede ser un resultado de función
** Las funciones y sus alcances (scopes)
+ El alcance de un nombre (por ejemplo, el nombre de una variable) es la parte del código donde el nombre es reconocido correctamente.
+ Una variable que existe fuera de una función tiene alcance dentro del cuerpo de la función.
+ Una variable que existe fuera de una función tiene un alcance dentro del cuerpo de la función, excluyendo a aquellas que tienen el mismo nombre.
+ el alcance de una variable existente fuera de una función solo se puede implementar dentro de una función cuando su valor es leído.
*** La palabra reservada: global
Existe un método especial en Python el cual puede extender el alcance de una variable incluyendo el cuerpo de las funciones para poder no solo leer los valores de las variables sino también modificarlos.
#+BEGIN_SRC python
global name
global name1, name2, ...
#+END_SRC

*** Como interactúa la función con sus argumentos
+ Al cambiar el valor del parámetro este no se propaga fuera de la función (más específicamente, no cuando la variable es un valor escalar, como en el ejemplo).
+ Una función recibe el valor del argumento, no el argumento en sí.
+ Si el argumento es una lista, el cambiar el valor del parámetro correspondiente no afecta la lista (Recuerda: las variables que contienen listas son almacenadas de manera diferente que las escalares).
+ Pero si se modifica la lista identificada por el parámetro (Nota: ¡La lista no el parámetro!), la lista reflejará el cambio.

** Puntos Clave
1. Una variable que existe fuera de una función tiene alcance dentro del cuerpo de la función. Al menos que la función defina una variable con el mismo nombre.
2. Una variable que existe dentro de una función tiene un alcance solo dentro del cuerpo de la función.
3. Se puede emplear la palabra reservada global seguida por el nombre de una variable para que el alcance de la variable sea global
** Recursividad
Este termino puede describir muchos conceptos distintos, pero uno de ellos, hace referencia a la programación computacional.

Aquí, la recursividad es una técnica donde una función se invoca a si misma.
#+BEGIN_SRC python
def fib(n):
    if n < 1:
        return None
    if n < 3:
        return 1
    return fib(n - 1) + fib(n - 2)
#+END_SRC
Si no se considera una condición que detenga las invocaciones recursivas, el programa puede entrar en un bucle infinito.
** Puntos Clave
1. Una función puede invocar otras funciones o incluso a sí misma. Cuando una función se invoca a si misma, se le conoce como recursividad, y la función que se invoca a si misma y contiene una condición de terminación (la cual le dice a la función que ya no siga invocándose a si misma) es llamada una función recursiva.
2. Se pueden emplear funciones recursivas en Python para crear funciones limpias, elegantes, y dividir el código en trozos más pequeños. Sin embargo, se debe tener mucho cuidado ya que es muy fácil cometer un error y crear una función la cual nunca termine. También se debe considerar que las funciones recursivas consumen mucha memoria, y por lo tanto pueden ser en ocasiones ineficientes.

** Tuplas y diccionarios
*** Tipos de secuencias y mutabilidad
**** Tipos de secuencias
Un tipo de secuencia es un tipo de dato en Python el cual es capaz de almacenar mas de un valor (o ninguno si la secuencia esta vacía), los cuales pueden ser secuencialmente (de ahí el nombre) examinados.
Una secuencia es un tipo de dato que puede ser escaneado por el bucle for.
**** La mutabilidad
Es una propiedad de cualquier tipo de dato en Python que describe su disponibilidad para poder cambiar libremente durante la ejecución de un programa. Existen dos tipos de datos en Python:
- mutables
  Los datos mutables pueden ser actualizados libremente en cualquier momento, a esta operación se le denomina "in situ".(en posición, en el lugar o momento.)
- inmutables
  Los datos inmutables no pueden ser modificados de esta manera.
  Una tupla es una secuencia inmutable. Se puede comportar como una lista pero no puede ser modificada en el momento.

*** ¿Qué es una tupla?
 Las tuplas utilizan paréntesis, mientras que las listas usan corchetes, aunque también es posible crear una tupla tan solo separando los valores por comas.
 #+BEGIN_SRC python
 tupla1 = (1, 2, 4, 8)
 tupla2 = 1., .5, .25, .125
 #+END_SRC
 Nota: cada elemento de una tupla puede ser de distinto tipo (punto flotante, entero, cadena, etc.).


*** ¿Cómo crear una tupla?
#+BEGIN_SRC python
tuplaVacia = ()
#+END_SRC
Si se desea crear una tupla de un solo elemento, se debe de considerar el hecho de que, debido a la sintaxis (una tupla debe de poder distinguirse de un valor entero ordinario), se debe de colocar una coma al final:
#+BEGIN_SRC python
tuplaUnElemento1 = (1, )
tuplaUnElemento2 = 1.,
#+END_SRC
El quitar las comas no arruinará el programa en el sentido sintáctico, pero serán variables no tuplas.
Las similitudes pueden ser engañosas - no intentes modificar en contenido de la tupla ¡No es una lista!
+ La función len() acepta tuplas, y regresa el numero de elementos contenidos dentro.
+ El operador + puede unir tuplas (ya se ha mostrado esto antes).
+ El operador * puede multiplicar las tuplas, así como las listas.
+ Los operadores in y not in funcionan de la misma manera que en las listas.

*** ¿Qué es un diccionario?
El diccionario es otro tipo de estructura de datos de Python. No es una secuencia (pero puede adaptarse fácilmente a un procesamiento secuencial) y además es mutable.
Esto significa que un diccionario es un conjunto de pares de claves y valores. Nota:
+ Cada clave debe de ser única.
+ Una clave puede ser un tipo de dato de cualquier tipo.
+ Un diccionario no es una lista. Una lista contiene un conjunto de valores numerados, mientras que un diccionario almacena pares de valores.
+ La función len() aplica también para los diccionarios, regresa la cantidad de pares (clave-valor) en el diccionario.
+ Un diccionario es una herramienta de un solo sentido. Si fuese un diccionario español-francés, podríamos buscar en español para encontrar su contraparte en francés mas no viceversa.
  #+BEGIN_SRC python
  dict = {"gato" : "chat", "perro" : "chien", "caballo" : "cheval"}
  numerosTelefono = {'jefe' : 5551234567, 'Suzy' : 22657854310}
  diccionarioVacio = {}

  print(dict)
  print(numerosTelefono)
  print(diccionarioVacio)
  #+END_SRC
+ los diccionarios no son listas - no guardan el orden de sus datos, el orden no tiene significado. El orden en que un diccionario almacena sus datos esta fuera de nuestro control. Esto es normal. (*)
***** El método keys()
 un método denominado keys(), el cual es parte de todo diccionario. El método retorna o regresa una lista de todas las claves dentro del diccionario. Al tener una lista de claves se puede acceder a todo el diccionario de una manera fácil y útil.
 #+BEGIN_SRC python
 dict = {"gato" : "chat", "perro" : "chien", "caballo" : "cheval"}

for key in dict.keys():
    print(key, "->", dict[key]
#+END_SRC
***** La función sorted()
La función sorted() hará su mejor esfuerzo y la salida será ordenada.


***** Los métodos item() y values()
****** items()
Este método regresa una lista de tuplas (este es el primer ejemplo en el que las tuplas son mas que un ejemplo de si mismas) donde cada tupla es un par de cada clave con su valor.
****** values()
Funciona de manera muy similar al de keys(), pero regresa una lista de valores.
***** Modificar, agregar y eliminar valores
El asignar un nuevo valor a una clave existente es sencillo, debido a que los diccionarios son completamente mutables, no existen obstáculos para modificarlos.
#+BEGIN_SRC python
dict = {"gato" : "chat", "perro" : "chien", "caballo" : "cheval"}

dict['gato'] = 'minou'
print(dict)
#+END_SRC
+ Agregando nuevas claves
  El agregar una nueva clave con su valor a un diccionario es tan simple como cambiar un valor. Solo se tiene que asignar un valor a una nueva clave que no haya existido antes.

  Nota: este es un comportamiento muy diferente comparado a las listas, las cuales no permiten asignar valores a índices no existentes.
  - También es posible insertar un elemento al diccionario utilizando el método update()
+ Eliminado claves
  Nota: al eliminar la clave también se removerá el valor asociado. Los valores no pueden existir sin sus claves.

  Esto se logra con la instrucción del.
  Para eliminar el ultimo elemento de la lista, se puede emplear el método popitem():

** Puntos Clave: Tuplas
1. Las Tuplas son colecciones de datos ordenadas e inmutables. Se puede pensar en ellas como listas inmutables. Se definen con paréntesis,Cada elemento de la tupla puede ser de un tipo de dato diferente.
2. Se puede crear una tupla vacía.
3.  La tupla de un solo elemento se define de la siguiente manera:
    #+BEGIN_SRC python
    tuplaUnElemento = ("uno", )    # paréntesis y coma
    tuplaUnElemento2 = "uno",     # sin paréntesis, solo la coma
    #+END_SRC
4. Se pueden acceder los elementos de la tupla al indexarlos
5. Las tuplas son inmutables, lo que significa que no se puede agregar, modificar, cambiar o quitar elementos.
6. Puedes navegar a través de los elementos de una tupla con un bucle

+ También se puede crear una tupla utilizando la función integrada de Python tuple().
+ Cuando se desea convertir un iterable en una liste, se puede emplear la función integrada de Python denominada list()

** Puntos Clave: Diccionarios
1. Los diccionarios son *colecciones indexadas de datos, mutables y desordenadas. (*En Python 3.6x los diccionarios están ordenados de manera predeterminada.

Cada diccionario es un par de clave : valor.
2. Si se desea acceder a un elemento del diccionario, se puede hacer haciendo referencia a su clave colocándola dentro de corchetes o utilizando el método get()
3. Si se desea cambiar el valor asociado a una clave especifica, se puede hacer haciendo referencia a la clave del elemento
4. Además, se puede insertar un elemento a un diccionario utilizando el método update(), y eliminar el ultimo elemento con el método popitem()
5. Se puede emplear el bucle for para iterar a través del diccionario
6. Si deseas examinar los elementos (claves y valores) del diccionario, puedes emplear el método items()
7. Para comprobar si una clave existe en un diccionario, se puede emplear la palabra reservada in
8. Se puede emplear la palabra reservada del para eliminar un elemento, o un diccionario entero. Para eliminar todos los elementos de un diccionario se debe emplear el método clear()
9. Para copiar un diccionario, emplea el método copy()

** EJERCICIOS
+ [TIC-TAC-TOE]()
