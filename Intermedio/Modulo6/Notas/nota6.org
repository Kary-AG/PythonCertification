* Fundamentos de Python: Módulo 6
** Los fundamentos de la POO
Python es una herramienta universal para la programación procedimental y orientada a objetos.
El enfoque *orientado* a **objetos** sugiere una forma de pensar completamente diferente. Los datos y el código están encapsulados juntos en el mismo mundo, divididos en clases.

 + Los métodos: funciones que se invocan desde dentro de los datos, no junto con ellos. Si puedes ver esta distinción, has dado el primer paso en la programación de objetos.
 + Las clases: Cada clase es como una receta que se puede usar cuando quieres crear un objeto útil. Puedes producir tantos objetos como necesites para resolver tu problema.
 + Un objeto: Cada objeto tiene un conjunto de rasgos (se denominan propiedades o atributos; usaremos ambas palabras como sinónimos) y es capaz de realizar un conjunto de actividades (que se denominan métodos).
*** Jerarquías de clase
La jerarquía crece de arriba hacia abajo, como raíces de árboles, no ramas. La clase más general y más amplia siempre está en la parte superior (la superclase) mientras que sus descendientes se encuentran abajo (las subclases).

*** ¿Qué es un objeto?
Una clase (entre otras definiciones) es un conjunto de objetos. Un objeto es un ser perteneciente a una clase, es una encarnación de los requisitos, rasgos y cualidades asignados a una clase específica.
+ Nota:  un objeto que pertenece a una clase específica pertenece a todas las superclases al mismo tiempo y un objeto perteneciente a una superclase puede no pertenecer a ninguna de sus subclases.
Cada objeto existente puede estar equipado con tres grupos de atributos:
  + Un objeto tiene un nombre que lo identifica de forma exclusiva dentro de su namespace(sustantivo)
  + Un objeto tiene un conjunto de propiedades individuales que lo hacen original, único o sobresaliente(adjetivo)
  + Un objeto tiene un conjunto de habilidades para realizar actividades específicas, capaz de cambiar el objeto en sí, o algunos de los otros objetos.(verbo)
#+begin_center
Max es un gato grande que duerme todo el día.

Nombre del objeto = Max
Clase de inicio = Gato
Propiedad = Tamaño (grande)
Actividad = Dormir (todo el día)
#+end_center

*** + código
Una clase es un modelo de una parte muy específica de la realidad, que refleja las propiedades y actividades que se encuentran en el mundo real, la existencia de una clase no significa que ninguno de los objetos compatibles se creará automáticamente.

Definir una clase (vacía)
#+begin_src python
class ClaseSimple:
    pass
#+end_src
- La definición comienza con la palabra clave reservada class. La palabra clave reservada es seguida por un identificador que nombrará la clase
- A continuación, se agregan dos puntos:), como clases, como funciones, forman su propio bloque anidado. El contenido dentro del bloque define todas las propiedades y actividades de la clase.
La clase recién definida se convierte en una herramienta que puede crear nuevos objetos, para el un objeto debes asignar una variable para almacenar el objeto recién creado de esa clase y crear un objeto al mismo tiempo.
#+BEGIN_SRC python
miPrimerObjeto = ClaseSimple()
#+END_SRC
*** Herencia(conceptos fundamentales de la programación de objetos)
Cualquier objeto vinculado a un nivel específico de una jerarquía de clases hereda todos los rasgos (así como los requisitos y cualidades) definidos dentro de cualquiera de las superclases.


** Un corto viaje desde el enfoque procedimental hasta el orientado a objetos
*** ¿Qué es una pila?
+ Una pila es una estructura desarrollada para almacenar datos de una manera muy específica.Último en Entrar - Primero en Salir (Last In - First Out) UEPS(LIFO).
+ Una pila es un objeto con dos operaciones elementales, denominadas convencionalmente push (cuando un nuevo elemento se coloca en la parte superior) y pop (cuando un elemento existente se retira de la parte superior).
**** La pila: el enfoque procedimental
- Creamos la pila como una lista
    #+BEGIN_SRC python
    pila = []
    #+END_SRC
- Definir una función que pone un valor en la pila.
    #+begin_src python
  def push(val):
    pila.append(val)
  #+end_src
- Definir  una función quite un valor de la pila.
  #+begin_src python
  def pop():
    val = pila[-1]
    del pila[-1]
    return val
  #+end_src
-  El programa completo empuja (push) tres números a la pila, los saca e imprime sus valores en pantalla.
  #+Begin_src python
push(3)
push(2)
push(1)

print(pop())
print(pop())
print(pop())
#+end_src
Ya tenemos nuestra implementación de pila pero tiene algunas desventajas, es por ello que darle un  enfoque orientado a objetos ofrece soluciones
 - La capacidad de ocultar (proteger) los valores seleccionados contra el acceso no autorizado se llama encapsulamiento; no se puede acceder a los valores encapsulados ni modificarlos si deseas utilizarlos exclusivamente.
 - Cuando tienes una clase que implementa todos los comportamientos de pila necesarios, puedes producir tantas pilas como desees; no necesitas copiar ni replicar ninguna parte del código.
 - La capacidad de enriquecer la pila con nuevas funciones proviene de la herencia; puedes crear una nueva clase (una subclase) que herede todos los rasgos existentes de la superclase y agregue algunos nuevos.
La nueva implementación de pila desde cero. Esta vez, utilizaremos el enfoque orientado a objetos.
Usaremos una lista como almacenamiento de la pila.
 - Comencemos desde el principio: así es como comienza la pila de orientada a objetos:
    #+begin_src python
    class Pila:
    #+end_src
   + Queremos que la clase tenga una propiedad como el almacenamiento de la pila - tenemos que "instalar" una lista dentro de cada objeto de la clase (nota: cada objeto debe tener su propia lista; la lista no debe compartirse entre diferentes pilas).
   + Despues, queremos que la lista esté oculta de la vista de los usuarios de la clase.
Debes agregar una instrucción específica. Las propiedades deben agregarse a la clase manualmente.
+ La función constructor

Hay que equipar a la clase con una función específica:

- Tiene que ser nombrada de forma estricta.
- Se invoca implícitamente cuando se crea el nuevo objeto.
- Su propósito general es construir un nuevo objeto. El constructor debe saber todo acerca de la estructura del objeto y debe realizar todas las inicializaciones necesarias.
#+begin_src python
def __init__(self):
    self.listaPila = []
#+end_src
- El nombre del constructor es siempre __init__
- Tiene que tener al menos un parámetro; el parámetro se usa para representar el objeto recién creado: puedes usar el parámetro para manipular el objeto y enriquecerlo con las propiedades necesarias; harás uso de esto pronto.
- El parámetro obligatorio generalmente se denomina self - es solo una sugerencía, pero deberías seguirla - simplifica el proceso de lectura y comprensión de tu código.

Recopilando...
#+begin_src python
class Pila:  #define la clase Pila
    def __init__(self):     #define la función del constructor
        self.listaPila = []

objetoPila = Pila() #instanciando el objeto
print(len(objetoPila.listaPila))
#+end_src
NOTA:
- la notación punteada, al igual que cuando se invocan métodos. Esta es la manera general para acceder a las propiedades de un objeto: debes nombrar el objeto, poner un punto (.) después de el, y especificar el nombre de la propiedad deseada.
Cuando cualquier componente de la clase tiene un nombre que comienza con dos guiones bajos (__), se vuelve privado - esto significa que solo se puede acceder desde la clase.
No puedes verlo desde el mundo exterior. Así es como Python implementa el concepto de *encapsulación*.
#+begin_src python
class Pila:
    def __init__(self):
        self.__listaPila = []

objetoPila = Pila()
print(len(objetoPila.__listaPila)) #Una excepción AttributeError es lanzada
#+end_src
+ Implementar las funciones agregar(push) y quitar(pop), ambos deben ser accesibles para el usuario de la clase, deben ser publicos el nombre no debe tener más de un guión bajo.
#+begin_src python
def push(self, val):
        self.__listaPila.append(val)

def pop(self):
      val = self.__listaPila[-1]
      del self.__listaPila[-1]
      return val
#+end_src

Ambas funciones tienen un parámetro llamado self en la primera posición de la lista de parámetros.Todos los métodos deben tener este parámetro. Desempeña el mismo papel que el primer parámetro constructor.
- Permite que el método acceda a entidades (propiedades y actividades / métodos) del objeto.
Ahora puedes hacer que más de una pila se comporte de la misma manera. Cada pila tendrá su propia copia de datos privados, pero utilizará el mismo conjunto de métodos.
#+begin_src python
class Pila:
    def __init__(self):
        self.__listaPila = []

    def push(self, val):
        self.__listaPila.append(val)

    def pop(self):
        val = self.__listaPila[-1]
        del self.__listaPila[-1]
        return val


objetoPila1 = Pila()
objetoPila2 = Pila()

objetoPila1.push(3)
objetoPila2.push(objetoPila1.pop())

print(objetoPila2.pop())
#+end_src
Existen dos pilas creadas a partir de la misma clase base. Trabajan independientemente. Puedes crear más si quieres.
*** Construir una subclase
Queremos construir una subclase de la ya existente clase Pila.
- Definimos una nueva subclase que apunte a la clase que se usará como superclase.
#+begin_src python
class SumarPila(Pila):
    pass
#+end_src
La clase aún no define ningún componente nuevo, pero eso no significa que esté vacía. Obtiene (hereda) todos los componentes definidos por su superclase - el nombre de la superclase se escribe después de los dos puntos, después del nombre de la nueva clase.
- Queremos que el método push no solo inserte el valor en la pila, sino que también sume el valor a la variable sum.
- Queremos que la función pop no solo extraiga el valor de la pila, sino que también reste el valor de la variable sum.
#+begin_src python
class SumarPila(Pila):
    def __init__(self):
        Pila.__init__(self) # invocar explícitamente el constructor de una superclase.
        self.__sum = 0 #definimos una nueva variable privada almacenará el total de todos los valores de la pila.
#+end_src
Nota: invocar cualquier método (incluidos los constructores) desde fuera de la clase nunca requiere colocar el argumento self en la lista de argumentos - invocar un método desde dentro de la clase exige el uso explícito del argumento self, y tiene que ser el primero en la lista.
- Cambiar la funcionalidad de los métodos, no sus nombres.
#+begin_src python
def push(self, val):
    self.__sum += val #Agregar el valor a la variable __sum.
    Pila.push(self, val)#Agregar el valor a la pila.
def pop(self):
    val = Pila.pop(self)
    self.__sum -= val
    return val #hemos definido la variable __sum
#definir un nuevo método para obtener el valor de __sum
def getSuma(self):
    return self.__sum

#+end_src


** Propiedades de la POO
*** Variables de instancia
+ Las propiedades de un objeto son a lo que llamamos variables de instancia.
+ Los objetos de Python, cuando se crean, están dotados de un pequeño conjunto de propiedades y métodos predefinidos. Cada objeto los tiene, los quieras o no. Uno de ellos es una variable llamada __dict__ (es un diccionario).(La variable contiene los nombres y valores de todas las propiedades (variables) que el objeto contiene actualmente.)
+ El modificar una variable de instancia de cualquier objeto no tiene impacto en todos los objetos restantes.
*** Variables de Clase
Una variable de clase es una propiedad que existe en una sola copia y se almacena fuera de cualquier objeto.
Nota: no existe una variable de instancia si no hay ningún objeto en la clase; existe una variable de clase en una copia, incluso si no hay objetos en la clase.
+ Las variables de clase no se muestran en el diccionario de un objeto __dict__ (esto es natural ya que las variables de clase no son partes de un objeto), pero siempre puedes intentar buscar en la variable del mismo nombre, pero a nivel de clase, te mostraremos esto muy pronto.
+ Una variable de clase siempre presenta el mismo valor en todas las instancias de clase (objetos).


*** Comprobando la existencia de un atributo
Es posible que no esperes que todos los objetos de la misma clase tengan los mismos conjuntos de propiedades.
#+begin_src python
class ClaseEjemplo:
    def __init__(self, val):
        if val % 2 != 0:
            self.a = 1
        else:
            self.b = 1

objetoEjemplo = ClaseEjemplo(1)
print(objetoEjemplo.a)

try:
    print(objetoEjemplo.b)
except AttributeError:
    pass
#+end_src
Python proporciona una función que puede verificar con seguridad si algún objeto / clase contiene una propiedad específica. La función se llama hasattr, y espera que le pasen dos argumentos:

- La clase o el objeto que se verifica.
- El nombre de la propiedad cuya existencia se debe informar (Nota: debe ser una cadena que contenga el nombre del atributo).
  #+begin_src python
  if hasattr(objetoEjemplo, 'b'):
    print(objetoEjemplo.b)
  #+end_src
- La función hasattr() también puede operar en clases. Puedes usarlo para averiguar si una variable de clase está disponible.
- La función devuelve True si la clase especificada contiene un atributo dado, y False de lo contrario.

*** Métodos
Un método es una función que está dentro de una clase.
- Un método está obligado a tener al menos un parámetro(self).
- El parámetro self es usado para obtener acceso a la instancia del objeto y las variables de clase.
- Si se nombra un método de esta manera: __init__, no será un método regular, será un constructor.
   - Esta obligado a tener el parámetro self (se configura automáticamente).
   - Pudiera (pero no necesariamente) tener mas parámetros que solo self; si esto sucede, la forma en que se usa el nombre de la clase para crear el objeto debe tener la definición __init__.
   - Se puede utilizar para configurar el objeto, es decir, inicializa adecuadamente su estado interno, crea variables de instancia, crea instancias de cualquier otro objeto si es necesario, etc.
   - Nota: una clase sin superclases explícitas apunta al objeto (una clase de Python predefinida) como su antecesor directo.

*** Reflexión e introspección
+ Introspección, que es la capacidad de un programa para examinar el tipo o las propiedades de un objeto en tiempo de ejecución.
+ Reflexión, que va un paso más allá, y es la capacidad de un programa para manipular los valores, propiedades y/o funciones de un objeto en tiempo de ejecución.

*** Herencia
- Composición
  La composición es el proceso de componer un objeto usando otros objetos diferentes.
La herencia extiende las capacidades de una clase agregando nuevos componentes y modificando los existentes; en otras palabras, la receta completa está contenida dentro de la clase misma y todos sus ancestros; el objeto toma todas las pertenencias de la clase y las usa.
La composición proyecta una clase como contenedor capaz de almacenar y usar otros objetos (derivados de otras clases) donde cada uno de los objetos implementa una parte del comportamiento de una clase.

*** Generadores
Un generador de Python es un fragmento de código especializado capaz de producir una serie de valores y controlar el proceso de iteración.( a menudo se llaman iteradores)
- La función range() es un generador, la cual también es un iterador.
  Un generador devuelve una serie de valores, y en general, se invoca (implícitamente) más de una vez.
El protocolo iterador es una forma en que un objeto debe comportarse para ajustarse a las reglas impuestas por el contexto de las sentencias for e in. Un objeto conforme al protocolo iterador se llama iterador.
- __iter__() el cual debe devolver el objeto en sí y que se invoca una vez (es necesario para que Python inicie con éxito la iteración).
- __next__() el cual debe devolver el siguiente valor (primero, segundo, etc.) de la serie deseada: será invocado por las sentencias for/in para pasar a la siguiente iteración; si no hay más valores a proporcionar, el método deberá lanzar la excepción StopIteration.

*** La sentencia yield
 Python ofrece una forma mucho más efectiva, conveniente y elegante de escribir iteradores.
- El concepto se basa fundamentalmente en un mecanismo muy específico proporcionado por la palabra clave reservada yield.
- Se puede ver a la palabra clave reservada yield como un hermano más inteligente de la sentencia return, con una diferencia esencial.
  #+begin_src python
  def fun(n):
    for i in range(n):
        yield i
  #+end_src
  - convierte la función en un generador
  - convierte la función en un generador
Nota
#+begin_src python
lst = []

for x in range(10):
    lst.append(1 if x % 2 == 0 else 0)

print(lst)

lst = [1 if x % 2 == 0 else 0 for x in range(10)]

print(lst)
lst = [1 if x % 2 == 0 else 0 for x in range(10)]
genr = (1 if x % 2 == 0 else 0 for x in range(10))

for v in lst:
    print(v, end=" ")
print()

for v in genr:
    print(v, end=" ")
print()
#+end_src
Los corchetes hacen una comprensión, los paréntesis hacen un generador.

*** Lambda
+ Mate vs Prog
    Los matemáticos usan el cálculo Lambda en sistemas formales conectados con: la lógica, la recursividad o la demostrabilidad de teoremas. Los programadores usan la función lambda para simplificar el código, hacerlo más claro y fácil de entender.
Una función lambda es una función sin nombre (también puedes llamarla una función anónima), La declaración de la función lambda no se parece a una declaración de función normal;
#+BEGIN_SRC python
lambda parámetros: expresión
#+END_SRC
Tal cláusula devuelve el valor de la expresión al tomar en cuenta el valor del argumento lambda actual.
**** ¿Cómo usar lambdas y para qué?
La parte más interesante de usar lambdas aparece cuando puedes usarlas en su forma pura - como partes anónimas de código destinadas a evaluar un resultado.

#+begin_src python
def imprimirfuncion(args, fun):
	for x in args:
		print('f(', x,')=', fun(x), sep='')

imprimirfuncion([x for x in range(-2, 3)], lambda x: 2 * x**2 - 4 * x + 2)
#+end_src

+ La función map() aplica la función pasada por su primer argumento a todos los elementos de su segundo argumento y devuelve un iterador que entrega todos los resultados de funciones posteriores.
+ La función filter() filtra su segundo argumento mientras es guiado por direcciones que fluyen desde la función especificada en el primer argumento.
  - Los elementos que regresan True de la función pasan el filtro - los otros son rechazados.

**** Una breve explicación de cierres
 cierres es una técnica que permite almacenar valores a pesar de que el contexto en el que se crearon ya no existe.
 #+begin_src python
 def crearcierre(par):
	loc = par
	def potencia(p):
		return p ** loc
	return potencia

fsqr = crearcierre(2)
fcub = crearcierre(3)
for i in range(5):
	print(i, fsqr(i), fcub(i))
#+end_src
